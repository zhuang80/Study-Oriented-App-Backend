<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wequan.bu.repository.dao.ThreadStreamMapper">
  <resultMap id="BaseResultMap" type="com.wequan.bu.repository.model.ThreadStream">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="thread_id" jdbcType="INTEGER" property="threadId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="to_stream_id" jdbcType="INTEGER" property="toStreamId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
    <result column="dislikes" jdbcType="INTEGER" property="dislikes" />
  </resultMap>

  <resultMap id="ResultMapWithBriefInfo" extends="BaseResultMap" type="com.wequan.bu.repository.model.extend.ThreadStreamStats">
    <result column="number_of_reply" jdbcType="INTEGER" property="numberOfReply" />
    <association property="userBriefInfo" columnPrefix="u_" resultMap="com.wequan.bu.repository.dao.UserMapper.ResultMapWithBriefInfo"/>
    <collection property="threadResources" columnPrefix="tr_" resultMap="com.wequan.bu.repository.dao.ThreadResourceMapper.BaseResultMap" />
  </resultMap>

  <resultMap id="ResultMapWithThreadBriefInfo" extends="BaseResultMap" type="com.wequan.bu.repository.model.extend.ThreadStreamStats">
    <association property="threadBriefInfo" columnPrefix="t_" resultMap="com.wequan.bu.repository.dao.ThreadMapper.ResultMapWithBriefInfo" />
  </resultMap>

  <resultMap id="ResultMapWithThread" extends="BaseResultMap" type="com.wequan.bu.repository.model.extend.ThreadStreamBriefInfo">
    <association property="userBriefInfo" columnPrefix="u_" resultMap="com.wequan.bu.repository.dao.UserMapper.ResultMapWithBriefInfo"/>
    <association property="thread" columnPrefix="t_" resultMap="com.wequan.bu.repository.dao.ThreadMapper.BaseResultMap" />
    <collection property="threadResources" columnPrefix="tr_" resultMap="com.wequan.bu.repository.dao.ThreadResourceMapper.BaseResultMap" />
  </resultMap>

  <sql id="Base_Column_List">
    id, user_id, thread_id, content, to_stream_id, create_time, update_time, likes, dislikes
  </sql>

  <sql id="Reply_Base_Select">
    ts.*,
    u.user_name as u_user_name, u.school_id as u_school_id, u.first_name as u_first_name, u.last_name as u_last_name,
    u.avatar_url as u_avatar_url, u.avatar_url_in_provider as u_avatar_url_in_provider, u.id as u_id,
    tr.id tr_id, tr.type tr_type, tr.link tr_link, tr.file_type tr_file_type,
    tr.file_name tr_file_name, tr.belong_id tr_belong_id
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ${schema}.wq_thread_stream
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectByUserId" resultMap="ResultMapWithThreadBriefInfo">
    select
      ts.*,
      t.id t_id,
      t.create_by t_create_by,
      t.title t_title,
      t.category t_category,
      t.tag_id t_tag_id
    from ${schema}.wq_thread_stream ts
    inner join ${schema}.wq_thread t on t.id = ts.thread_id
    where ts.user_id = #{userId}
  </select>

  <select id="selectDirectRepliesById" parameterType="java.lang.Integer" resultMap="ResultMapWithBriefInfo">
    select
      <include refid="Reply_Base_Select"/>,
      (select count(1) from ${schema}.wq_thread_stream where to_stream_id = ts.id) as number_of_reply
    from ${schema}.wq_thread_stream ts
    inner join ${schema}.wq_user_profile u on ts.user_id = u.id
    left join ${schema}.wq_thread_resource tr on (ts.id = tr.belong_id and tr.type = 2)
    where ts.thread_id = #{threadId,jdbcType=INTEGER} and ts.to_stream_id is null
  </select>

  <select id="selectIndirectRepliesById" parameterType="java.lang.Integer" resultMap="ResultMapWithBriefInfo">
    select <include refid="Reply_Base_Select"/>
    from ${schema}.wq_thread_stream ts
    inner join ${schema}.wq_user_profile u on ts.user_id = u.id
    left join ${schema}.wq_thread_resource tr on (ts.id = tr.belong_id and tr.type = 2)
    where ts.thread_id = #{threadId,jdbcType=INTEGER} and ts.to_stream_id is not null
  </select>

  <select id="selectIndirectRepliesForDirectReply" resultMap="ResultMapWithBriefInfo">
    select <include refid="Reply_Base_Select"/>
    from ${schema}.wq_thread_stream ts
    inner join ${schema}.wq_user_profile u on ts.user_id = u.id
    left join ${schema}.wq_thread_resource tr on (ts.id = tr.belong_id and tr.type = 2)
    where ts.thread_id = #{threadId,jdbcType=INTEGER} and ts.to_stream_id = #{directReplyId,jdbcType=INTEGER}
  </select>

  <select id="selectLabelThreadReply" resultMap="ResultMapWithBriefInfo">
    select * from (
      select
        <include refid="Reply_Base_Select"/>,
        (select count(1) from ${schema}.wq_thread_stream where to_stream_id = ts.id) as number_of_reply
      from ${schema}.wq_thread_stream ts
      inner join ${schema}.wq_user_profile u on ts.user_id = u.id
      left join ${schema}.wq_thread_resource tr on (ts.id = tr.belong_id and tr.type = 2)
    ) a where
    <choose>
      <when test="label == 1">
        a.number_of_reply > 0
      </when>
      <when test="label == 2">
        a.likes > 0
      </when>
    </choose>
  </select>

  <select id="selectThreadReplyByUserId" resultMap="ResultMapWithThread">
    select
      <include refid="Reply_Base_Select"/>,
      t.id t_id, t.create_by t_create_by, t.title t_title, t.category t_category, t.tag_id t_tag_id, t.content t_content,
      t.study_points_bonus t_study_points_bonus, t.create_time t_create_time, t.update_time t_update_time, t.likes t_likes,
      t.dislikes t_dislikes, t.status t_status, t.school_id t_school_id
    from ${schema}.wq_thread_stream ts
    inner join ${schema}.wq_user_profile u on ts.user_id = u.id
    left join ${schema}.wq_thread_resource tr on (ts.id = tr.belong_id and tr.type = 2)
    inner join ${schema}.wq_thread t on t.id = ts.thread_id
    where t.create_by = #{userId}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ${schema}.wq_thread_stream
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.wequan.bu.repository.model.ThreadStream" useGeneratedKeys="true">
    insert into ${schema}.wq_thread_stream
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="threadId != null">
        thread_id,
      </if>
      <if test="content != null and content != ''">
        content,
      </if>
      <if test="toStreamId != null">
        to_stream_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="likes != null">
        likes,
      </if>
      <if test="dislikes != null">
        dislikes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="threadId != null">
        #{threadId,jdbcType=INTEGER},
      </if>
      <if test="content != null and content != ''">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="toStreamId != null">
        #{toStreamId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
      <if test="dislikes != null">
        #{dislikes,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.wequan.bu.repository.model.ThreadStream">
    update ${schema}.wq_thread_stream
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="threadId != null">
        thread_id = #{threadId,jdbcType=INTEGER},
      </if>
      <if test="content != null and content != ''">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="toStreamId != null">
        to_stream_id = #{toStreamId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="dislikes != null">
        dislikes = #{dislikes,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="likeThreadReply">
    update ${schema}.wq_thread_stream
    set likes = likes + 1
    where id = #{replyId, jdbcType=INTEGER}
  </update>

  <update id="dislikeThreadReply">
    update ${schema}.wq_thread_stream
    set dislikes = dislikes + 1
    where id = #{replyId, jdbcType=INTEGER}
  </update>

</mapper>