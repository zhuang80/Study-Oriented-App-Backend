<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wequan.bu.repository.dao.ThreadMapper">
  <resultMap id="BaseResultMap" type="com.wequan.bu.repository.model.Thread">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="category" jdbcType="SMALLINT" property="category" />
    <result column="tag_id" jdbcType="SMALLINT" property="tagId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="study_points_bonus" jdbcType="SMALLINT" property="studyPointsBonus" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
    <result column="dislikes" jdbcType="INTEGER" property="dislikes" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="school_id" jdbcType="INTEGER" property="schoolId" />
  </resultMap>

  <resultMap id="ResultMapWithStats" extends="BaseResultMap" type="com.wequan.bu.repository.model.extend.ThreadStats">
    <result column="ts_subject_ids" jdbcType="VARCHAR" property="subjectIds" />
    <result column="number_of_view" jdbcType="INTEGER" property="numberOfView" />
    <result column="number_of_reply" jdbcType="INTEGER" property="numberOfReply" />
    <association property="createByUser" columnPrefix="u_" resultMap="com.wequan.bu.repository.dao.UserMapper.ResultMapWithBriefInfo" />
    <collection property="threadResources" columnPrefix="tr_" resultMap="com.wequan.bu.repository.dao.ThreadResourceMapper.BaseResultMap" />
  </resultMap>

  <resultMap id="ResultMapWithBriefInfo" type="com.wequan.bu.repository.model.extend.ThreadBriefInfo">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="category" jdbcType="INTEGER" property="category" />
    <result column="tag_id" jdbcType="INTEGER" property="tagId" />
  </resultMap>

  <resultMap id="ReportRecordResultMap" type="com.wequan.bu.repository.model.ReportRecord">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="user_id" jdbcType="INTEGER" property="userId"/>
    <result column="resource_type" jdbcType="SMALLINT" property="resourceType"/>
    <result column="resource_id" jdbcType="INTEGER" property="resourceId"/>
    <result column="report_time" jdbcType="TIMESTAMP" property="reportTime"/>
    <result column="reason" jdbcType="VARCHAR" property="reason"/>
  </resultMap>

  <sql id="Base_Column_List">
    id, create_by, title, category, tag_id, content, study_points_bonus, create_time, 
    update_time, likes, dislikes, status, school_id
  </sql>

  <sql id="Stats_Base_Column">
    t.*,
    u.user_name as u_user_name, u.school_id as u_school_id, u.first_name as u_first_name, u.last_name as u_last_name,
    u.avatar_url as u_avatar_url, u.avatar_url_in_provider as u_avatar_url_in_provider, u.id as u_id,
    ts.subject_ids as ts_subject_ids
  </sql>

  <sql id="Stats_Base_Table">
    ${schema}.wq_thread t
    inner join ${schema}.wq_user_profile u on u.id = t.create_by
    left join (
      select thread_id, string_agg(subject_id::character varying, ',') as subject_ids
      from ${schema}.wq_thread_subject
      group by thread_id
    ) ts on ts.thread_id = t.id
  </sql>

  <sql id="Resource_Base_Column">
    tr.id tr_id, tr.type tr_type, tr.link tr_link, tr.file_type tr_file_type,
    tr.file_name tr_file_name, tr.belong_id tr_belong_id
  </sql>

  <sql id="Stats_Number_Base_Column">
    (select count(1) from ${schema}.wq_thread_view_history v where v.thread_id = t.id) as number_of_view,
    (select count(1) from ${schema}.wq_thread_stream s where s.thread_id = t.id) as number_of_reply
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithStats">
    select <include refid="Stats_Base_Column"/>,
      <include refid="Stats_Number_Base_Column"/>,
      <include refid="Resource_Base_Column"/>
    from <include refid="Stats_Base_Table"/>
    left join ${schema}.wq_thread_resource tr on (t.id = tr.belong_id and tr.type = 1)
    where t.id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectBySchoolId" resultMap="ResultMapWithStats">
    select <include refid="Stats_Base_Column"/>,
      <include refid="Stats_Number_Base_Column"/>,
      <include refid="Resource_Base_Column"/>
    from <include refid="Stats_Base_Table"/>
    left join ${schema}.wq_thread_resource tr on (t.id = tr.belong_id and tr.type = 1)
    where t.school_id = #{schoolId, jdbcType=INTEGER}
  </select>

  <select id="selectBySchoolIdAndTag" resultMap="ResultMapWithStats">
    select <include refid="Stats_Base_Column"/>,
      <include refid="Stats_Number_Base_Column"/>
    from <include refid="Stats_Base_Table"/>
    where t.school_id = #{schoolId, jdbcType=INTEGER}
    <if test="tagId > 0">
      and t.tag_id = #{tagId, jdbcType=SMALLINT}
    </if>
    order by t.create_time desc
  </select>

  <select id="selectByUserFollowing" resultMap="ResultMapWithStats">
    select <include refid="Stats_Base_Column"/>,
      <include refid="Stats_Number_Base_Column"/>,
      <include refid="Resource_Base_Column"/>
    from <include refid="Stats_Base_Table"/>
    left join ${schema}.wq_thread_resource tr on (t.id = tr.belong_id and tr.type = 1)
    where exists (
      select 1 from ${schema}.wq_user_follow uf
      where uf.user_id = #{userId} and uf.follow_id = t.create_by
    )
  </select>

  <select id="selectBySchoolIdOrderedByView" parameterType="java.lang.Integer" resultMap="ResultMapWithStats">
    select
      t.*, ts.subject_ids as ts_subject_ids,
      <include refid="Stats_Number_Base_Column"/>
    from ${schema}.wq_thread t
    left join (
      select thread_id, string_agg(subject_id::character varying, ',') as subject_ids
      from ${schema}.wq_thread_subject
      group by thread_id
    ) ts on ts.thread_id = t.id
    where t.school_id = #{schoolId,jdbcType=INTEGER}
    order by number_of_view desc, t.create_time desc
  </select>

  <select id="selectUserInterestedStudyHelpThreads" resultMap="ResultMapWithStats">
    select <include refid="Stats_Base_Column"/>,
      <include refid="Stats_Number_Base_Column"/>,
      <include refid="Resource_Base_Column"/>
    from ${schema}.wq_thread t
    inner join ${schema}.wq_user_profile u on u.id = t.create_by
    left join (
      select thread_id, string_agg(subject_id::character varying, ',') as subject_ids
      from ${schema}.wq_thread_subject
      where subject_id in
      <foreach item="subjectId" collection="subjectIds" open="(" separator="," close=")">
        #{subjectId}
      </foreach>
      group by thread_id
    ) ts on ts.thread_id = t.id
    left join ${schema}.wq_thread_resource tr on (t.id = tr.belong_id and tr.type = 1)
    where t.category = 1
  </select>

  <select id="selectByUserId" resultMap="ResultMapWithStats">
    select <include refid="Stats_Base_Column"/>,
      <include refid="Stats_Number_Base_Column"/>
    from <include refid="Stats_Base_Table"/>
    where t.create_by = #{userId}
  </select>

  <select id="selectThreadStatsById" resultMap="ResultMapWithStats">
    select <include refid="Stats_Base_Column"/>,
      <include refid="Stats_Number_Base_Column"/>
    from <include refid="Stats_Base_Table"/>
    where t.id = #{id}
  </select>

  <select id="selectSubjectIdsUserSelected" resultType="java.lang.String">
    select subject_ids
    from ${schema}.wq_thread_user_selected_subjects
    where user_id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectLabelThreads" resultMap="ResultMapWithStats">
    select * from (
      select <include refid="Stats_Base_Column"/>,
        <include refid="Stats_Number_Base_Column"/>,
        <include refid="Resource_Base_Column"/>
      from <include refid="Stats_Base_Table"/>
      left join ${schema}.wq_thread_resource tr on (t.id = tr.belong_id and tr.type = 1)
    ) a where
    <choose>
      <when test="label == 1">
        a.number_of_reply > 0
      </when>
      <when test="label == 2">
        a.likes > 0
      </when>
    </choose>
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ${schema}.wq_thread
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <delete id="deleteUserSelectedSubjects" parameterType="java.lang.Integer">
    delete from ${schema}.wq_thread_user_selected_subjects
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>

  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.wequan.bu.repository.model.Thread" useGeneratedKeys="true">
    insert into ${schema}.wq_thread
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="createBy != null">
        create_by,
      </if>
      <if test="title != null and title != ''">
        title,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="tagId != null">
        tag_id,
      </if>
      <if test="content != null and content != ''">
        content,
      </if>
      <if test="studyPointsBonus != null">
        study_points_bonus,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="likes != null">
        likes,
      </if>
      <if test="dislikes != null">
        dislikes,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="schoolId != null">
        school_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="createBy != null">
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="title != null and title != ''">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        #{category,jdbcType=SMALLINT},
      </if>
      <if test="tagId != null">
        #{tagId,jdbcType=SMALLINT},
      </if>
      <if test="content != null and content != ''">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="studyPointsBonus != null">
        #{studyPointsBonus,jdbcType=SMALLINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
      <if test="dislikes != null">
        #{dislikes,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="schoolId != null">
        #{schoolId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

  <insert id="insertUserSelectedSubjects">
      insert into ${schema}.wq_thread_user_selected_subjects (user_id, subject_ids)
      values (#{userId,jdbcType=INTEGER}, #{subjectIds,jdbcType=VARCHAR})
      on conflict (user_id)
      do update set subject_ids = EXCLUDED.subject_ids
  </insert>

  <insert id="insertSubjectIds">
    insert into ${schema}.wq_thread_subject
    values
    <foreach collection="subjectIds" item="subjectId" separator=",">
      (#{threadId,jdbcType=INTEGER}, #{subjectId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP})
    </foreach>
  </insert>

  <insert id="insertViewHistory">
    insert into ${schema}.wq_thread_view_history (user_id, thread_id, view_time)
    values
    (#{userId,jdbcType=INTEGER}, #{threadId,jdbcType=INTEGER}, #{viewTime,jdbcType=TIMESTAMP})
    on conflict (user_id, thread_id)
    do update set view_time = EXCLUDED.view_time
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.wequan.bu.repository.model.Thread">
    update ${schema}.wq_thread
    <set>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        category = #{category,jdbcType=SMALLINT},
      </if>
      <if test="tagId != null">
        tag_id = #{tagId,jdbcType=SMALLINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="studyPointsBonus != null">
        study_points_bonus = #{studyPointsBonus,jdbcType=SMALLINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="dislikes != null">
        dislikes = #{dislikes,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="likeThread">
    update ${schema}.wq_thread
    set likes = likes + 1
    where id = #{threadId, jdbcType=INTEGER}
  </update>

  <update id="dislikeThread">
    update ${schema}.wq_thread
    set dislikes = dislikes + 1
    where id = #{threadId, jdbcType=INTEGER}
  </update>

</mapper>