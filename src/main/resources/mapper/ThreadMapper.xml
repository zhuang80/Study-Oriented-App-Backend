<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wequan.bu.repository.dao.ThreadMapper">
  <resultMap id="BaseResultMap" type="com.wequan.bu.repository.model.Thread">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="category" jdbcType="SMALLINT" property="category" />
    <result column="tag_id" jdbcType="SMALLINT" property="tagId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="study_points_bonus" jdbcType="SMALLINT" property="studyPointsBonus" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
    <result column="dislikes" jdbcType="INTEGER" property="dislikes" />
  </resultMap>

  <resultMap id="ResultMapWithStats" extends="BaseResultMap" type="com.wequan.bu.repository.model.extend.ThreadStats">
    <result column="create_by_name" jdbcType="VARCHAR" property="createByName" />
    <result column="tag_name" jdbcType="VARCHAR" property="tagName" />
    <result column="number_of_view" jdbcType="INTEGER" property="numberOfView" />
    <result column="number_of_reply" jdbcType="INTEGER" property="numberOfReply" />
  </resultMap>

  <resultMap id="StreamResultMap" type="com.wequan.bu.repository.model.ThreadStream">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="thread_id" jdbcType="INTEGER" property="threadId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="to_stream_id" jdbcType="INTEGER" property="toStreamId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
    <result column="dislikes" jdbcType="INTEGER" property="dislikes" />
  </resultMap>

  <resultMap id="SubjectsResultMap" type="com.wequan.bu.repository.model.ThreadUserSelectedSubjects">
    <id column="id" jdbcType="INTEGER" property="userId"/>
    <result column="subjects_ids" jdbcType="VARCHAR" property="subjectIds"/>
  </resultMap>

  <resultMap id="ReportRecordResultMap" type="com.wequan.bu.repository.model.ReportRecord">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="user_id" jdbcType="INTEGER" property="userId"/>
    <result column="resource_type" jdbcType="SMALLINT" property="resourceType"/>
    <result column="resource_id" jdbcType="INTEGER" property="resourceId"/>
    <result column="report_time" jdbcType="TIMESTAMP" property="reportTime"/>
    <result column="reason" jdbcType="VARCHAR" property="reason"/>
  </resultMap>

  <sql id="Base_Column_List">
    id, create_by, title, category, tag_id, content, study_points_bonus, create_time, 
    update_time, likes, dislikes
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ${schema}.wq_thread
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectBySchoolId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select ${schema}.wq_thread.id, create_by, title, category, tag_id, content, study_points_bonus, create_time,
    update_time, likes, dislikes
    from ${schema}.wq_thread join ${schema}.wq_user_profile
    on ${schema}.wq_thread.create_by = ${schema}.wq_user_profile.id
    where school_id = #{schoolId, jdbcType=INTEGER}
  </select>

  <select id="selectBySchoolIdAndTag" resultMap="BaseResultMap">
    select ${schema}.wq_thread.id, create_by, title, category, tag_id, content, study_points_bonus, create_time,
    update_time, likes, dislikes
    from ${schema}.wq_thread join ${schema}.wq_user_profile
    on ${schema}.wq_thread.create_by = ${schema}.wq_user_profile.id
    where school_id = #{school_id, jdbcType=INTEGER} and tag_id = #{tag_id, jdbcType=SMALLINT}
    order by ${schema}.wq_thread.create_time desc
  </select>

  <select id="selectDirectRepliesById" parameterType="java.lang.Integer" resultMap="StreamResultMap">
    select *
    from ${schema}.wq_thread_stream
    where thread_id = #{thread_id,jdbcType=INTEGER}
  </select>

  <select id="selectIndirectRepliesById" parameterType="java.lang.Integer" resultMap="StreamResultMap">
    select *
    from ${schema}.wq_thread_stream
    where thread_id = #{thread_id,jdbcType=INTEGER}
  </select>

  <select id="selectByUserFollowingId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select ${schema}.wq_thread.id, create_by, title, category, tag_id, content, study_points_bonus, create_time,
    update_time, likes, dislikes
    from ${schema}.wq_thread join ${schema}.wq_user_follow on ${schema}.wq_thread.create_by = ${schema}.wq_user_follow.follow_id
    where ${schema}.wq_user_follow.user_id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectUserSelectedSubjectsById" parameterType="java.lang.Integer" resultMap="SubjectsResultMap">
    select subjects_ids
    from ${schema}.wq_user_selected_subjects
    where id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectedBySchoolIdOrderedByView" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select ${schema}.wq_thread.id, create_by, title, category, tag_id, content, study_points_bonus, create_time,
    update_time, likes, dislikes
    from ${schema}.wq_thread join ${schema}.wq_user_profile
    on ${schema}.wq_thread.create_by = ${schema}.wq_user_profile.id
    where school_id = #{schoolId, jdbcType=INTEGER}
    order by num_of_view desc
  </select>

  <select id="getUserInterestedStudyHelpThreadsByIds" resultMap="BaseResultMap">
    select ${schema}.wq_thread.id, create_by, title, category, tag_id, content, study_points_bonus, create_time,
    update_time, likes, dislikes
    from ((${schema}.wq_thread_user_selected_subjects ss join ${schema}.wq_thread_subject s on ss.subject_ids = s.subject_id)
    join ${schema}.wq_thread t on s.thread_id = t.id)
    where s.subject_id in
    <foreach item="subject_id" index="index" collection="list" open="(" separator="," close=")">
    #{subjectIds}
  </foreach>
    and t.create_by = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectByUserId" resultMap="ResultMapWithStats">
    select
      t.*,
      u.user_name as create_by_name,
      tg.name as tag_name,
      (select count(1) from ${schema}.wq_thread_view_history v where v.thread_id = t.id) as number_of_view,
      (select count(1) from ${schema}.wq_thread_stream s where s.thread_id = t.id) as number_of_reply
    from ${schema}.wq_thread t
    inner join ${schema}.wq_user_profile u on u.id = t.create_by
    inner join ${schema}.wq_tags tg on tg.id = t.tag_id
    where t.create_by = #{userId}
  </select>

  <select id="selectThreadStatsById" resultMap="ResultMapWithStats">
    select
      t.*,
      u.user_name as create_by_name,
      tg.name as tag_name,
      (select count(1) from ${schema}.wq_thread_view_history v where v.thread_id = t.id) as number_of_view,
      (select count(1) from ${schema}.wq_thread_stream s where s.thread_id = t.id) as number_of_reply
    from ${schema}.wq_thread t
    inner join ${schema}.wq_user_profile u on u.id = t.create_by
    inner join ${schema}.wq_tags tg on tg.id = t.tag_id
    where t.id = #{id}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ${schema}.wq_thread
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <delete id="deleteUserSelectedSubjectsById" parameterType="java.lang.Integer">
    delete from ${schema}.wq_thread_user_selected_subjects
    where id = #{userId,jdbcType=INTEGER}
  </delete>

  <insert id="insertThread" keyColumn="id" keyProperty="id" parameterType="com.wequan.bu.repository.model.Thread" useGeneratedKeys="true">
    insert into ${schema}.wq_thread (create_by, title, category,
      tag_id, content, study_points_bonus, 
      create_time, update_time, likes, 
      dislikes)
    values (#{createBy,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{category,jdbcType=SMALLINT}, 
      #{tagId,jdbcType=SMALLINT}, #{content,jdbcType=VARCHAR}, #{studyPointsBonus,jdbcType=SMALLINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{likes,jdbcType=INTEGER}, 
      #{dislikes,jdbcType=INTEGER})
  </insert>

  <insert id="insertReply" keyColumn="id" keyProperty="id" parameterType="com.wequan.bu.repository.model.ThreadStream" useGeneratedKeys="true">
    insert into ${schema}.wq_thread_stream(user_id, thread_id, content, to_stream_id, create_time, update_time, likes, dislikes)
    values (#{userId,jdbcType=INTEGER},#{threadId,jdbcType=INTEGER},#{content,jdbcType=VARCHAR},#{toStreamId,jdbcType=INTEGER},
    #{createTime,jdbcType=TIMESTAMP},#{updateTime,jdbcType=TIMESTAMP},#{likes,jdbcType=INTEGER},#{dislikes,jdbcType=INTEGER})
  </insert>

  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.wequan.bu.repository.model.Thread" useGeneratedKeys="true">
    insert into ${schema}.wq_thread
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="createBy != null">
        create_by,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="tagId != null">
        tag_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="studyPointsBonus != null">
        study_points_bonus,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="likes != null">
        likes,
      </if>
      <if test="dislikes != null">
        dislikes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="createBy != null">
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        #{category,jdbcType=SMALLINT},
      </if>
      <if test="tagId != null">
        #{tagId,jdbcType=SMALLINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="studyPointsBonus != null">
        #{studyPointsBonus,jdbcType=SMALLINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
      <if test="dislikes != null">
        #{dislikes,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

  <insert id="addUserInterestedSubjects" keyColumn="user_id" keyProperty="userId" parameterType="com.wequan.bu.repository.model.ThreadUserSelectedSubjects" useGeneratedKeys="true">
    insert into ${schema}.wq_thread_user_selected_subjects(user_id, subject_ids)
    values (#{userId, jdbcType=INTEGER}, #{subject_ids, jdbcType=VARCHAR})
  </insert>

  <insert id="reportThread" keyColumn="id" keyProperty="id" useGeneratedKeys="true">
    insert into ${schema}.wq_report_record(id, user_id, resource_type, resource_id, report_time, reason)
    values (#{id, jdbcType=INTEGER},#{userId, jdbcType=INTEGER},#{1, jdbcType=SMALLINT},#{threadId, jdbcType=INTEGER},
    #{reportDate, jdbcType=TIMESTAMP},#{reason, jdbcType=VARCHAR},)
  </insert>

  <insert id="reportReplyToThread" keyColumn="id" keyProperty="id" useGeneratedKeys="true">
    insert into ${schema}.wq_report_record(id, user_id, resource_type, resource_id, report_time, reason)
    values (#{id, jdbcType=INTEGER},#{userId, jdbcType=INTEGER},#{2, jdbcType=SMALLINT},#{replyId, jdbcType=INTEGER},
    #{reportDate, jdbcType=TIMESTAMP},#{reason, jdbcType=VARCHAR},)
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.wequan.bu.repository.model.Thread">
    update ${schema}.wq_thread
    <set>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        category = #{category,jdbcType=SMALLINT},
      </if>
      <if test="tagId != null">
        tag_id = #{tagId,jdbcType=SMALLINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="studyPointsBonus != null">
        study_points_bonus = #{studyPointsBonus,jdbcType=SMALLINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="dislikes != null">
        dislikes = #{dislikes,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wequan.bu.repository.model.Thread">
    update ${schema}.wq_thread
    set create_by = #{createBy,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      category = #{category,jdbcType=SMALLINT},
      tag_id = #{tagId,jdbcType=SMALLINT},
      content = #{content,jdbcType=VARCHAR},
      study_points_bonus = #{studyPointsBonus,jdbcType=SMALLINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      likes = #{likes,jdbcType=INTEGER},
      dislikes = #{dislikes,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="likeThread" parameterType="java.lang.Integer">
    update ${schema}.wq_thread
    set likes = likes+1
    where id = #{threadId, jdbcType=INTEGER}
  </update>

  <update id="dislikeThread" parameterType="java.lang.Integer">
    update ${schema}.wq_thread
    set dislikes = dislikes+1
    where id = #{threadId, jdbcType=INTEGER} and created_by = #{userId, jdbcType=INTEGER}
  </update>

  <update id="likeReplyOfThread" parameterType="java.lang.Integer">
    update ${schema}.wq_thread_stream
    set likes = likes+1
    where id = #{threadId, jdbcType=INTEGER} and user_id=#{userId, jdbcType=INTEGER} and to_stream_id = #{replyId, jdbcType=INTEGER}
  </update>

  <update id="dislikeReplyOfThread" parameterType="java.lang.Integer">
    update ${schema}.wq_thread_stream
    set dislikes = dislikes+1
    where id = #{threadId, jdbcType=INTEGER} and user_id=#{userId, jdbcType=INTEGER} and to_stream_id = #{replyId, jdbcType=INTEGER}
  </update>

</mapper>