package com.wequan.bu.repository.model;

import lombok.Data;

import java.util.Date;

/**
 * Database Table Remarks:
 *   帖子回复记录
 *
 * This class was generated by MyBatis Generator.
 * This class corresponds to the database table bu.wq_thread_stream
 *
 * @mbg.generated do_not_delete_during_merge
 */
@Data
public class ThreadStream {
    /**
     * Database Column Remarks:
     *   主键
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column bu.wq_thread_stream.id
     *
     * @mbg.generated
     */
    private Integer id;

    /**
     * Database Column Remarks:
     *   回复帖子的用户id，关联user_profile(id)
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column bu.wq_thread_stream.user_id
     *
     * @mbg.generated
     */
    private Integer userId;

    /**
     * Database Column Remarks:
     *   帖子id，关联thread(id)
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column bu.wq_thread_stream.thread_id
     *
     * @mbg.generated
     */
    private Integer threadId;

    /**
     * Database Column Remarks:
     *   帖子评论
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column bu.wq_thread_stream.comment
     *
     * @mbg.generated
     */
    private String comment;

    /**
     * Database Column Remarks:
     *   回复几楼
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column bu.wq_thread_stream.to_stream_id
     *
     * @mbg.generated
     */
    private Integer toStreamId;

    /**
     * Database Column Remarks:
     *   回复帖子时间
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column bu.wq_thread_stream.create_time
     *
     * @mbg.generated
     */
    private Date createTime;

    /**
     * Database Column Remarks:
     *   更新帖子时间
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column bu.wq_thread_stream.update_time
     *
     * @mbg.generated
     */
    private Date updateTime;

    /**
     * Database Column Remarks:
     *   点赞数
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column bu.wq_thread_stream.likes
     *
     * @mbg.generated
     */
    private Integer likes;

    /**
     * Database Column Remarks:
     *   拍砖数
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column bu.wq_thread_stream.dislikes
     *
     * @mbg.generated
     */
    private Integer dislikes;

    /**
     * 同回复帖子关联的文件（图片，文件等）的S3链接id，多个id用逗号分隔，关联thread_resource(id)
     */
    private String resourceIds;
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bu.wq_thread_stream
     *
     * @mbg.generated
     */
    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        ThreadStream other = (ThreadStream) that;
        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))
            && (this.getUserId() == null ? other.getUserId() == null : this.getUserId().equals(other.getUserId()))
            && (this.getThreadId() == null ? other.getThreadId() == null : this.getThreadId().equals(other.getThreadId()))
            && (this.getComment() == null ? other.getComment() == null : this.getComment().equals(other.getComment()))
            && (this.getToStreamId() == null ? other.getToStreamId() == null : this.getToStreamId().equals(other.getToStreamId()))
            && (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))
            && (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()))
            && (this.getLikes() == null ? other.getLikes() == null : this.getLikes().equals(other.getLikes()))
            && (this.getDislikes() == null ? other.getDislikes() == null : this.getDislikes().equals(other.getDislikes()));
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bu.wq_thread_stream
     *
     * @mbg.generated
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        result = prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());
        result = prime * result + ((getThreadId() == null) ? 0 : getThreadId().hashCode());
        result = prime * result + ((getComment() == null) ? 0 : getComment().hashCode());
        result = prime * result + ((getToStreamId() == null) ? 0 : getToStreamId().hashCode());
        result = prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());
        result = prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());
        result = prime * result + ((getLikes() == null) ? 0 : getLikes().hashCode());
        result = prime * result + ((getDislikes() == null) ? 0 : getDislikes().hashCode());
        return result;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bu.wq_thread_stream
     *
     * @mbg.generated
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", userId=").append(userId);
        sb.append(", threadId=").append(threadId);
        sb.append(", comment=").append(comment);
        sb.append(", toStreamId=").append(toStreamId);
        sb.append(", createTime=").append(createTime);
        sb.append(", updateTime=").append(updateTime);
        sb.append(", likes=").append(likes);
        sb.append(", dislikes=").append(dislikes);
        sb.append("]");
        return sb.toString();
    }
}