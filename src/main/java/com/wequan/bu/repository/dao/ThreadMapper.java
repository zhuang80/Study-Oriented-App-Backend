package com.wequan.bu.repository.dao;

import com.wequan.bu.repository.model.Thread;
import com.wequan.bu.repository.model.ThreadStream;
import com.wequan.bu.repository.model.ThreadUserSelectedSubjects;
import io.swagger.models.auth.In;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

@Mapper
public interface ThreadMapper extends GeneralMapper<Thread>{

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bu.wq_thread
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bu.wq_thread
     *
     * @mbg.generated
     */
    int insert(Thread record);

    /**
     *6/20
     * @param threadStream
     * @return
     */
    int insertReply(ThreadStream threadStream);
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bu.wq_thread
     *
     * @mbg.generated
     */
    int insertSelective(Thread record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bu.wq_thread
     *
     * @mbg.generated
     */
    Thread selectByPrimaryKey(Integer id);

    /**
     * 6/18
     * @param schoolId
     * @return
     */
    List<Thread> selectBySchoolId(Integer schoolId);

    /**
     * 6/19
     * @param schoolId
     * @param tagId
     * @return
     */
    List<Thread> selectBySchoolIdAndTag(Integer schoolId, Integer tagId);
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bu.wq_thread
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(Thread record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bu.wq_thread
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(Thread record);

    /**
     * 6/20
     * @param threadId
     * @param userId
     */
    void likeThread(Integer threadId, Integer userId);

    /**
     * 6/20
     * @param threadId
     * @param userId
     */
    void dislikeThread(Integer threadId, Integer userId);

    /**
     * 6/20
     * @param threadId
     * @param replyId
     * @param userId
     */
    void likeReplyOfThread(Integer threadId, Integer replyId, Integer userId);

    /**
     * 6/20
     * @param threadId
     * @param replyId
     * @param userId
     */
    void dislikeReplyOfThread(Integer threadId, Integer replyId, Integer userId);

    //boolean replyToThread(ThreadStream threadStream);

    List<ThreadStream> selectRepliesById(Integer threadId);

    //List<ThreadUserSelectedSubjects> findSubjectsById(Integer userId);
}